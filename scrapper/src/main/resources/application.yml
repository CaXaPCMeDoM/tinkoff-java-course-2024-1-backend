github:
  base-url: https://api.github.com
stackoverflow:
  base-url: https://api.stackexchange.com/2.3
bot-local-host:
  base-url: ${BOT_HOST:http://localhost:8090}

link:
  update:
    delay: 5000 # в миллисекундах

management:
  server:
    port: 8081
  endpoints:
    web:
      exposure:
        include: "info,health,prometheus"
      base-path: /
      path-mapping:
        prometheus: "metrics"
  metrics:
    tags:
      application: ${spring.application.name}

app:
  useQueue: true
  database-access-type: JPA
  scheduler:
    enable: true
    interval: 10s
    force-check-delay: 10s
spring:
  application:
    name: scrapper
  datasource:
    password: postgres
    username: postgres
    url: jdbc:postgresql://${POSTGRESQL_HOST:localhost:5437}/scrapper
  liquibase:
    enabled: false
  jpa:
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: true
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml
springdoc:
  swagger-ui:
    path: /swagger-ui

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: /links.*
      strategy: first
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: getHeader('X-Forwarded-For')
          bandwidths:
            - capacity: 10
              time: 10
              unit: seconds
    - cache-name: rate-limit-buckets
      url: /tg-chat.*
      strategy: first
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: getHeader('X-Forwarded-For')
          bandwidths:
            - capacity: 10
              time: 10
              unit: seconds

client:
  retry:
    max-attempts: 10
    back-off-type: EXPONENTIAL
    status: 500, 501
    delay-base: 1000
    exponential-attributes:
      multiplier-value: 2
      random-interval-value: 10
      random-interval-on: true
      max-interval-value: 10000
      max-interval-on: true

kafka:
  bootstrap-servers: ${KAFKA_URL_FIRST:localhost:29091},${KAFKA_URL_SECOND:localhost:29092},${KAFKA_URL_THIRD:localhost:29093}
  acksMode: all
  topic-name: topic-updates
